# -*- coding: utf-8 -*-
"""cat V dog.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SakHNXp2jqzNMM-inWl2yah27c5i0Xow
"""

import numpy as np
import pandas as pd
from pathlib import Path
import os.path
from sklearn.model_selection import train_test_split

import tensorflow as tf

from sklearn.metrics import confusion_matrix, classification_report

from google.colab import drive
drive.mount('/content/drive/')

image_dir = Path('/content/drive/MyDrive/dog-vs-cat-classification')

filepaths = list(image_dir.glob(r'**/*.jpg'))
filepaths = pd.Series(filepaths, name='Filepath').astype(str)

#labels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepaths))
labels=list(map(lambda x:os.path.split(os.path.split(x)[0])[1],filepaths))
labels = pd.Series(labels, name='Label')

image_df = pd.concat([filepaths, labels], axis=1)
image_df

train_df, test_df = train_test_split(image_df, train_size=0.7, shuffle=True, random_state=1)

train_df.head()

train_generator = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale=1./255,
    horizontal_flip=True,
    width_shift_range=0.2,
    height_shift_range=0.2,
    validation_split=0.2
)

test_generator = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale=1./255
)

train_images = train_generator.flow_from_dataframe(
    dataframe=train_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(224, 224),
    color_mode='rgb',
    class_mode='binary',
    batch_size=32,
    shuffle=True,
    seed=42,
    subset='training'
)

val_images = train_generator.flow_from_dataframe(
    dataframe=train_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(224, 224),
    color_mode='rgb',
    class_mode='binary',
    batch_size=32,
    shuffle=True,
    seed=42,
    subset='validation'
)

test_images = test_generator.flow_from_dataframe(
    dataframe=test_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(224, 224),
    color_mode='rgb',
    class_mode='binary',
    batch_size=32,
    shuffle=False
)

inputs = tf.keras.Input(shape=(224, 224, 3))
inputs.shape

inputs = tf.keras.Input(shape=(224, 224, 3))
x = tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), activation='relu')(inputs)
x = tf.keras.layers.MaxPool2D()(x)
x = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu')(x)
x = tf.keras.layers.MaxPool2D()(x)
x = tf.keras.layers.GlobalAveragePooling2D()(x)
x = tf.keras.layers.Dense(128, activation='relu')(x)
x = tf.keras.layers.Dense(128, activation='relu')(x)
outputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)

model = tf.keras.Model(inputs=inputs, outputs=outputs)

model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['accuracy']
)
history = model.fit(
    train_images,
    validation_data=val_images,
    epochs=20,
    callbacks=[
        tf.keras.callbacks.EarlyStopping(
            monitor='val_loss',
            patience=10,
            restore_best_weights=True
        ),
        tf.keras.callbacks.ReduceLROnPlateau(
            monitor='val_loss',
            patience=3
        )
    ]
)

results = model.evaluate(test_images, verbose=0)

print("    Test Loss: {:.5f}".format(results[0]))
print("Test Accuracy: {:.2f}%".format(results[1] * 100))

predictions = (model.predict(test_images) >= 0.5).astype(np.int)

predictions

model.save_weights('./checkpoints/my_checkpoint')

model = tf.keras.Model(inputs=inputs, outputs=outputs)

# Restore the weights
model.load_weights('./checkpoints/my_checkpoint')

predictions = (model.predict(test_images) >= 0.5).astype(np.int)

predictions

# Create and train a new model instance.

# Save the entire model as a SavedModel.
!mkdir -p saved_model
model.save('/content/drive/MyDrive/my model')

new_model = tf.keras.models.load_model('/content/drive/MyDrive/my model')

predictions = (new_model.predict(test_images) >= 0.5).astype(np.int)


